{"version":3,"file":"static/js/247.ecdedf79.chunk.js","mappings":"iUAIMA,EAAM,mCACNC,EAAM,gCAECC,EAAe,mCAAG,8FAChBC,IAAAA,IAAA,UACHF,EADG,uCAC+BD,IACzCI,MAAK,SAAAC,GACJ,OAAOA,CACR,IACAC,OAAM,SAAAC,GACLC,EAAAA,GAAAA,MAAYD,EAAME,QACnB,IAR0B,mFAAH,qDAWfC,EAAsB,mCAAG,WAAMC,GAAN,iFACvBR,IAAAA,IAAA,UACHF,EADG,iBACSU,EADT,oBACuBX,IACjCI,MAAK,SAAAC,GACJ,OAAOA,CACR,IACAC,OAAM,SAAAC,GACLC,EAAAA,GAAAA,MAAYD,EAAME,QACnB,IARiC,mFAAH,sDAWtBG,EAAmB,mCAAG,WAAOC,EAAMF,GAAb,iFACpBR,IAAAA,IAAA,UACHF,EADG,iBACSU,EADT,YACeE,EADf,oBAC+Bb,EAD/B,2BAEVI,MAAK,SAAAC,GACJ,OAAOA,CACR,IACAC,OAAM,SAAAC,GACLC,EAAAA,GAAAA,MAAYD,EAAME,QACnB,IAR8B,mFAAH,wDAWnBK,EAAoB,mCAAG,WAAMC,GAAN,oEACpB,KAAVA,EAD8B,iEAIrBZ,IAAAA,IAAA,UAENF,EAFM,gCAEqBD,EAFrB,iCAEiDe,EAFjD,gCAIVX,MAAK,SAAAC,GACJ,OAAOA,CACR,IACAC,OAAM,SAAAC,GACLC,EAAAA,GAAAA,MAAYD,EAAME,QACnB,IAb+B,mFAAH,sDAgBjCC,EAAuBM,UAAY,CACjCL,GAAIM,IAAAA,OAAAA,YAENL,EAAoBI,UAAY,CAC9BH,KAAMI,IAAAA,OAAAA,WACNN,GAAIM,IAAAA,OAAAA,YAENH,EAAqBE,UAAY,CAC/BD,MAAOE,IAAAA,OAAAA,W,kIC1DM,SAASC,IACtB,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAaC,EAAAA,EAAAA,IAAU,QAAQZ,IAErCa,EAAAA,EAAAA,YAAU,WACW,KAAfF,IACJV,EAAAA,EAAAA,IAAoB,UAAWU,GAAYlB,MAAK,YAAe,IAAZqB,EAAW,EAAXA,KACjDJ,EAAaI,EACd,GACF,GAAE,CAACH,IAEJ,IAAQI,EAASN,EAATM,KAER,GAAKA,EAAL,CACA,IAAMC,EAAaD,EAAKE,MAAM,EAAG,IACjC,OACE,8BACIF,GAAwB,IAAhBA,EAAKG,QAKb,SAAC,KAAD,CAAKC,QAAQ,OAAOC,cAAc,SAASC,MAAM,QAAjD,UACE,SAAC,KAAD,CACEC,GAAG,KACHH,QAAQ,OACRI,oBAAqB,CAAC,oBACtBC,QAAQ,OAJV,SAMGR,EAAWS,KACV,YAAkE,IAA/DC,EAA8D,EAA9DA,UAAW1B,EAAmD,EAAnDA,GAAI2B,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,qBACpC,OACE,UAAC,KAAD,CACEV,QAAQ,OACRC,cAAc,SACdU,WAAW,SACXN,QAAQ,MAJV,WAOE,gBACEO,IACGH,EAAD,yCAEsCA,GA7ClD,gEA+CUI,IAAKL,KAEP,uBAAIA,KACJ,uBAAID,KACJ,uBAAIG,MAZC7B,EAeV,SAlCP,SAAC,KAAD,CAAKmB,QAAQ,OAAOE,MAAM,QAA1B,UACE,2DANS,CA8ClB,C","sources":["components/Api/ServiceApi.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\n\nconst KEY = '4568c047ac29c58c34b8c5ba81189d61';\nconst URL = 'https://api.themoviedb.org/3/';\n\nexport const ApiServiseTrand = async () => {\n  return await axios\n    .get(`${URL}trending/movie/week?api_key=${KEY}`)\n    .then(res => {\n      return res;\n    })\n    .catch(error => {\n      toast.error(error.message);\n    });\n};\n\nexport const ApiServiseMovieDetails = async id => {\n  return await axios\n    .get(`${URL}movie/${id}?api_key=${KEY}`)\n    .then(res => {\n      return res;\n    })\n    .catch(error => {\n      toast.error(error.message);\n    });\n};\n\nexport const ApiServiseCastMovie = async (page, id) => {\n  return await axios\n    .get(`${URL}movie/${id}/${page}?api_key=${KEY}&language=en-US&page=1`)\n    .then(res => {\n      return res;\n    })\n    .catch(error => {\n      toast.error(error.message);\n    });\n};\n\nexport const ApiServiceSerchMovie = async query => {\n  if (query === '') {\n    return;\n  }\n  return await axios\n    .get(\n      `${URL}search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    )\n    .then(res => {\n      return res;\n    })\n    .catch(error => {\n      toast.error(error.message);\n    });\n};\n\nApiServiseMovieDetails.propTypes = {\n  id: PropTypes.string.isRequired,\n};\nApiServiseCastMovie.propTypes = {\n  page: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\nApiServiceSerchMovie.propTypes = {\n  query: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { Box } from 'CommonStyle/Common.styled';\nimport { ApiServiseCastMovie } from '../Api/ServiceApi';\nimport { useParams } from 'react-router-dom';\nconst IMG = 'https://dummyimage.com/200x300/000/0011ff&text=Not+find+photo';\n\nexport default function Cast() {\n  const [castMovie, setcastMovie] = useState([]);\n  const hrefPageId = useParams('cast').id;\n\n  useEffect(() => {\n    if (hrefPageId === '') return;\n    ApiServiseCastMovie('credits', hrefPageId).then(({ data }) => {\n      setcastMovie(data);\n    });\n  }, [hrefPageId]);\n\n  const { cast } = castMovie;\n\n  if (!cast) return;\n  const castLength = cast.slice(0, 12);\n  return (\n    <>\n      {!cast || cast.length === 0 ? (\n        <Box display=\"flex\" color=\"black\">\n          <h2>Sorry, nothing was found (:</h2>\n        </Box>\n      ) : (\n        <Box display=\"flex\" flexDirection=\"column\" color=\"black\">\n          <Box\n            as=\"ul\"\n            display=\"grid\"\n            gridTemplateColumns={['repeat(6, 200px)']}\n            gridGap=\"50px\"\n          >\n            {castLength.map(\n              ({ character, id, name, profile_path, known_for_department }) => {\n                return (\n                  <Box\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    gridGap=\"5px\"\n                    key={id}\n                  >\n                    <img\n                      src={\n                        !profile_path\n                          ? IMG\n                          : `https://image.tmdb.org/t/p/w200${profile_path}`\n                      }\n                      alt={name}\n                    />\n                    <p>{name}</p>\n                    <p>{character}</p>\n                    <p>{known_for_department}</p>\n                  </Box>\n                );\n              }\n            )}\n          </Box>\n        </Box>\n      )}\n    </>\n  );\n}\n"],"names":["KEY","URL","ApiServiseTrand","axios","then","res","catch","error","toast","message","ApiServiseMovieDetails","id","ApiServiseCastMovie","page","ApiServiceSerchMovie","query","propTypes","PropTypes","Cast","useState","castMovie","setcastMovie","hrefPageId","useParams","useEffect","data","cast","castLength","slice","length","display","flexDirection","color","as","gridTemplateColumns","gridGap","map","character","name","profile_path","known_for_department","alignItems","src","alt"],"sourceRoot":""}