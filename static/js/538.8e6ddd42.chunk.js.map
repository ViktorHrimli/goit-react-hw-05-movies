{"version":3,"file":"static/js/538.8e6ddd42.chunk.js","mappings":"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","sources":["components/Api/ServiceApi.jsx","components/Pages/Movies.styled.js","components/Pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\n\nconst KEY = '4568c047ac29c58c34b8c5ba81189d61';\nconst URL = 'https://api.themoviedb.org/3/';\n\nexport const ApiServiseTrand = async (query, page) => {\n  return await axios\n    .get(`${URL}trending/movie/week?api_key=${KEY}`)\n    .then(res => {\n      return res;\n    })\n    .catch(error => {\n      toast.error(error.message);\n    });\n};\n\nexport const ApiServiseMovieDetails = async id => {\n  return await axios\n    .get(`${URL}movie/${id}?api_key=${KEY}`)\n    .then(res => {\n      return res;\n    })\n    .catch(error => {\n      toast.error(error.message);\n    });\n};\n\nexport const ApiServiseCastMovie = async (page, id) => {\n  return await axios\n    .get(`${URL}movie/${id}/${page}?api_key=${KEY}&language=en-US&page=1`)\n    .then(res => {\n      return res;\n    })\n    .catch(error => {\n      toast.error(error.message);\n    });\n};\n\nexport const ApiServiceSerchMovie = async query => {\n  return await axios\n    .get(\n      `${URL}search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    )\n    .then(res => {\n      return res;\n    })\n    .catch(error => {\n      toast.error(error.message);\n    });\n};\n\nApiServiseTrand.propTypes = {\n  query: PropTypes.string.isRequired,\n  page: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\nimport { Field } from 'formik';\n\nexport const Input = styled(Field)`\n  position: relative;\n  width: ${p => p.theme.space[8]}px;\n  padding: ${p => p.theme.space[2]}px;\n  outline: none;\n  border: ${p => p.theme.borders.normal};\n  border-radius: ${p => p.theme.radii.md};\n  font-family: ${p => p.theme.fonts.heading};\n  font-size: ${p => p.theme.fontSizes.s};\n  margin-bottom: ${p => p.theme.space[3]}px;\n  transition: border 250ms, box-shadow 250ms;\n\n  :hover,\n  :focus {\n    border: ${p => p.theme.borders.normal} ${p => p.theme.colors.accent};\n    box-shadow: 2px 2px 3px #00bfff;\n  }\n`;\n\nexport const MoviesRenderList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 20px;\n`;\n\nexport const MoviesItemCard = styled.li`\n  :hover {\n    scale: 1.05;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport { Box, LinksRouterBack } from 'CommonStyle/Common.styled';\nimport { Input, MoviesItemCard, MoviesRenderList } from './Movies.styled';\nimport { ApiServiceSerchMovie } from '../Api/ServiceApi';\n\nconst IMG = 'https://dummyimage.com/400x600/000/0011ff&text=Not+find+photo';\n\nexport default function Movies({ onClick }) {\n  const [serchMovies, setserchMovies] = useState([]);\n  const [serchParams, setSerchParams] = useSearchParams();\n  const useQueryUrlParams = serchParams.get('query') ?? '';\n  const [query, setQuery] = useState(() => {\n    return useQueryUrlParams;\n  });\n  const handleSubmit = ({ serchQuery }, { resetForm }) => {\n    setSerchParams(\n      serchQuery !== '' ? { query: serchQuery.trim().toLowerCase() } : {}\n    );\n    setQuery(serchQuery.trim().toLowerCase());\n    resetForm();\n  };\n\n  useEffect(() => {\n    if (query.length === 0) return;\n    ApiServiceSerchMovie(query).then(({ data: { results } }) => {\n      setserchMovies(results);\n    });\n  }, [query]);\n  const location = useLocation();\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"flex-start\"\n        mr=\"auto\"\n      >\n        <LinksRouterBack to=\"/\" state={{ from: location }}>\n          Back\n        </LinksRouterBack>\n      </Box>\n      <Box\n        as=\"main\"\n        color=\"black\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        gridGap=\"20px\"\n      >\n        <h1>Movies</h1>\n        <Formik\n          initialValues={{ serchQuery: useQueryUrlParams }}\n          onSubmit={handleSubmit}\n        >\n          <Form>\n            <Input type=\"text\" name=\"serchQuery\" />\n          </Form>\n        </Formik>\n        <Box>\n          <MoviesRenderList>\n            {serchMovies &&\n              serchMovies.map(({ id, original_title, poster_path }) => (\n                <MoviesItemCard key={id}>\n                  <Link\n                    onClick={() => onClick(id)}\n                    to={`${id}`}\n                    state={{ from: location }}\n                  >\n                    <img\n                      src={\n                        !poster_path\n                          ? IMG\n                          : `https://image.tmdb.org/t/p/w400${poster_path}`\n                      }\n                      alt={original_title}\n                    />\n                    <p>{original_title}</p>\n                  </Link>\n                </MoviesItemCard>\n              ))}\n          </MoviesRenderList>\n        </Box>\n      </Box>\n    </>\n  );\n}\n\nMovies.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n"],"names":["KEY","URL","ApiServiseTrand","query","page","axios","then","res","catch","error","toast","message","ApiServiseMovieDetails","id","ApiServiseCastMovie","ApiServiceSerchMovie","propTypes","PropTypes","Input","styled","Field","p","theme","space","borders","normal","radii","md","fonts","heading","fontSizes","s","colors","accent","MoviesRenderList","MoviesItemCard","Movies","onClick","useState","serchMovies","setserchMovies","useSearchParams","serchParams","setSerchParams","useQueryUrlParams","get","setQuery","useEffect","length","results","data","location","useLocation","display","flexDirection","alignItems","mr","to","state","from","as","color","gridGap","initialValues","serchQuery","onSubmit","resetForm","trim","toLowerCase","type","name","map","original_title","poster_path","src","alt"],"sourceRoot":""}